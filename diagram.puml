@startuml 
class "admin.LogEntry <Administration>" as admin.LogEntry #f4d6f1 {
    log entry
    --
    - id (AutoField)
    + action_time (DateTimeField)
    ~ user (ForeignKey)
    ~ content_type (ForeignKey)
    + object_id (TextField)
    + object_repr (CharField)
    + action_flag (PositiveSmallIntegerField)
    + change_message (TextField)
    --
}
admin.LogEntry -- auth.User
admin.LogEntry -- contenttypes.ContentType


class "auth.Permission <Authentication and Authorization>" as auth.Permission #e8f4d6 {
    permission
    --
    - id (AutoField)
    + name (CharField)
    ~ content_type (ForeignKey)
    + codename (CharField)
    --
}
auth.Permission -- contenttypes.ContentType


class "auth.Group <Authentication and Authorization>" as auth.Group #e8f4d6 {
    group
    --
    - id (AutoField)
    + name (CharField)
    # permissions (ManyToManyField)
    --
}
auth.Group *--* auth.Permission


class "auth.User <Authentication and Authorization>" as auth.User #e8f4d6 {
    user
    --
    - id (AutoField)
    + password (CharField)
    + last_login (DateTimeField)
    + is_superuser (BooleanField)
    + username (CharField)
    + first_name (CharField)
    + last_name (CharField)
    + email (EmailField)
    + is_staff (BooleanField)
    + is_active (BooleanField)
    + date_joined (DateTimeField)
    # groups (ManyToManyField)
    # user_permissions (ManyToManyField)
    --
}
auth.User *--* auth.Group
auth.User *--* auth.Permission


class "contenttypes.ContentType <Content Types>" as contenttypes.ContentType #d6f4de {
    content type
    --
    - id (AutoField)
    + app_label (CharField)
    + model (CharField)
    --
}


class "sessions.Session <Sessions>" as sessions.Session #f4e1d6 {
    session
    --
    + session_key (CharField)
    + session_data (TextField)
    + expire_date (DateTimeField)
    --
}


class "db.ISSModuleConstraint <Db>" as db.ISSModuleConstraint #e4f4d6 {
    Ограничение по модулю МКС
    --
    + id (UUIDField)
    + title (CharField)
    + description (TextField)
    --
}


class "db.TechnicalConstraint <Db>" as db.TechnicalConstraint #e4f4d6 {
    Техническое ограничение смежных инструкций
    --
    + id (UUIDField)
    + title (CharField)
    + description (TextField)
    --
}


class "db.MoralConstraint <Db>" as db.MoralConstraint #e4f4d6 {
    Моральное ограничение смежных инструкций
    --
    + id (UUIDField)
    + title (CharField)
    + description (TextField)
    --
}


class "db.OtherConstraint <Db>" as db.OtherConstraint #e4f4d6 {
    Иное ограничение смежных инструкций
    --
    + id (UUIDField)
    + title (CharField)
    + description (TextField)
    --
}


class "db.Instruction <Db>" as db.Instruction #e4f4d6 {
    Инструкция
    --
    + id (UUIDField)
    + title (CharField)
    + description (TextField)
    + minimum_execution_time (DurationField)
    + priority (CharField)
    # iss_module_constraint (ManyToManyField)
    # technical_constraint (ManyToManyField)
    # moral_constraint (ManyToManyField)
    # other_constraint (ManyToManyField)
    --
}
db.Instruction *--* db.ISSModuleConstraint
db.Instruction *--* db.TechnicalConstraint
db.Instruction *--* db.MoralConstraint
db.Instruction *--* db.OtherConstraint


class "db.Plan <Db>" as db.Plan #e4f4d6 {
    План полета
    --
    + id (UUIDField)
    ~ parent (ForeignKey)
    + approved (BooleanField)
    + type (CharField)
    # instructions (ManyToManyField)
    --
}
db.Plan -- db.Plan
db.Plan *--* db.Instruction


@enduml
